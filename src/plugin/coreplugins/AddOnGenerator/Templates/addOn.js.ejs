/*globals define*/

/**
 * Generated by AddOnGenerator <%= version %> from webgme on <%= date %>.
 */

define([
    'addon/AddOnBase'
], function (AddOnBase) {
    'use strict';

    /**
     * Initializes a new instance of <%= addOnId %>.
     * @class
     * @augments {AddOnBase}
     * @classdesc This class represents the addOn <%= addOnId %>.
     * @constructor
     */
    var <%= addOnId %> = function (mainLogger, gmeConfig) {
        // Call base class' constructor.
        AddOnBase.call(this, mainLogger, gmeConfig);
    };

    // Prototypal inheritance from AddOnBase.
    <%= addOnId %>.prototype = Object.create(AddOnBase.prototype);
    <%= addOnId %>.prototype.constructor = <%= addOnId %>;

    /**
     * Gets the name of the <%= addOnId %>.
     * @returns {string} The name of the AddOn.
     * @public
     */
    <%= addOnId %>.prototype.getName = function () {
        return '<%= addOnName %>';
    };

    /**
     * Gets the semantic version (semver.org) of the <%= addOnId %>.
     * @returns {string} The version of the AddOn.
     * @public
     */
    <%= addOnId %>.prototype.getVersion = function () {
        return '0.1.0';
    };<% if (description) {%>

    /**
     * Gets the description of the <%= addOnId %>.
     * @returns {string} The description of the AddOn.
     * @public
     */
    <%= addOnId %>.prototype.getDescription = function () {
        return '<%= description %>';
    };<%}%>

    /**
     * This is invoked each time changes in the branch of the project are done. AddOns are allowed to make changes on
     * an update, but should not persist by themselves. (The AddOnManager will persist after each addOn has had its way
     * ordered by the usedAddOn registry in the rootNode).
     * Before each invocation a new updateResult is created which should be returned in the callback. There is no need
     * for the AddOn to report if it made changes or not, the monitor/manager will always persist and if there are no
     * changed objects - it won't commit to the storage.
     * @param {object} rootNode
     * @param {object} commitObj
     * @param {function(Error, AddOnUpdateResult)} callback
     */
    <%= addOnId %>.prototype.update = function (rootNode, commitObj, callback) {
        var newName = commitObj.updater.toString();
        this.logger.info('<%= addOnId %> in update at commitHash', commitObj._id);

        if (this.core.getAttribute(rootNode, 'name') !== newName) {
            this.logger.info('<%= addOnId %> changing name of root to committer(s): ', newName);
            this.core.setAttribute(rootNode, 'name', newName);
            this.addCommitMessage('Changed rootNode name to "' + newName + '"');
        }

        callback(null, this.updateResult);
    };

    /**
     * Called once when the addOn is started for the first time.
     * @param {object} rootNode
     * @param {object} commitObj
     * @param {function(Error, AddOnUpdateResult} callback
     */
    <%= addOnId %>.prototype.initialize = function (rootNode, commitObj, callback) {
        this.logger.info('<%= addOnId %> got initialized at commitHash', commitObj._id);

        this.update(rootNode, commitObj, callback);
    };

    return <%= addOnId %>;
});
