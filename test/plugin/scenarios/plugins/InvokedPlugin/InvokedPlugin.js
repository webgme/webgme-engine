/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.16.0 from webgme on Mon Oct 22 2018 16:02:07 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */
if (typeof define !== 'undefined') {
    define([
        'plugin/PluginConfig',
        'text!./metadata.json',
        'plugin/PluginBase'
    ], function (
        PluginConfig,
        pluginMetadata,
        PluginBase) {
        'use strict';

        pluginMetadata = JSON.parse(pluginMetadata);

        /**
         * Initializes a new instance of InvokedPlugin.
         * @class
         * @augments {PluginBase}
         * @classdesc This class represents the plugin InvokedPlugin.
         * @constructor
         */
        function InvokedPlugin() {
            // Call base class' constructor.
            PluginBase.call(this);
            this.pluginMetadata = pluginMetadata;
        }

        /**
         * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
         * This is also available at the instance at this.pluginMetadata.
         * @type {object}
         */
        InvokedPlugin.metadata = pluginMetadata;

        // Prototypical inheritance from PluginBase.
        InvokedPlugin.prototype = Object.create(PluginBase.prototype);
        InvokedPlugin.prototype.constructor = InvokedPlugin;

        /**
         * Main function for the plugin to execute. This will perform the execution.
         * Notes:
         * - Always log with the provided logger.[error,warning,info,debug].
         * - Do NOT put any user interaction logic UI, etc. inside this method.
         * - callback always has to be called even if error happened.
         *
         * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
         */
        InvokedPlugin.prototype.main = function (callback) {
            var activeNode = this.activeNode,
                core = this.core,
                config = this.getCurrentConfig(),
                root = core.getRoot(activeNode),
                relids;

            core.createNode({relid: 'Id', parent: root, base: this.META.FCO});
            relids = core.getChildrenRelids(root);
            if (relids.indexOf('I') === -1) {
                this.result.setSuccess(false);
            } else {
                this.result.setSuccess(true);
            }
            if (config.doCheck !== true) {
                this.result.setSuccess(true);
            }
            this.createMessage(root, JSON.stringify(Object.keys(this.META)), 'debug');
            callback(null, this.result);
        };

        return InvokedPlugin;
    });
}